library(shinydashboard)
library(wordcloud)
library(tm)
library(tidyverse)
library(bubbles)
library(DT)
library(ggplot2)
library(dplyr)
library(plotly)
df <- read.csv("musicDataset.csv",fileEncoding = "ISO-8859-1")
df <- df %>% drop_na
nrow(df)
df <- df %>% arrange(desc(Popularity))
#create a new dataframe
dfx <- df %>% head(20)
actual_energy <- df$actual_energy
predicted_energy <- df$predicted_energy
actual_danceability <- df$actual_danceability
predicted_danceability <- df$predicted_danceability
#create sample of 20 songs
generate_sample <- function() {
df %>% sample_n(20, replace = FALSE)
}
ui<-dashboardPage(skin ="purple",
dashboardHeader(
title = "Music Recommender",
titleWidth = 200
),
dashboardSidebar(
width=200,
sidebarMenu(
menuItem("Main",tabName = "Main",icon = icon("smile-wink")),
menuItem("Info",tabName = "Info",icon = icon("chart-bar")),
menuItem("Dataset",tabName = "Dataset",icon = icon("table")),
menuItem("About",tabName = "About",icon = icon("cog", lib = "glyphicon"))
)
),
dashboardBody(
tags$head(tags$style(HTML('
.main-header .logo {
font-family: "Georgia", Times, "Times New Roman", serif;
font-weight: bold;
font-size: 15px;
}
'))),
tabItems(
# First tab content
tabItem(tabName = "Main",
fluidRow(
box(
width = 12, background = "purple",
"NOTE that not all combinations of songs return suggestions."
)
),
fluidRow(
box(
title = "Please choose the songs interested", width = 8,
actionButton("shuffle", "Shuffle Sample Songs"),
selectInput("chosen_song1", "Song #1", choices = NULL, multiple = FALSE, selected = NULL),
selectInput("chosen_song2", "Song #2", choices = NULL, multiple = FALSE, selected = NULL),
selectInput("chosen_song3", "Song #3", choices = NULL, multiple = FALSE, selected = NULL),
selectInput("chosen_song4", "Song #4", choices = NULL, multiple = FALSE, selected = NULL),
selectInput("chosen_song5", "Song #5", choices = NULL, multiple = FALSE, selected = NULL),
h6("Press submit to update changes!"),
actionButton("submit", "Submit")
),
box(
title = "Recommended Songs", status = "primary", solidHeader = TRUE,
collapsible = TRUE,
width = 4,
tableOutput("recommended_songs")
)
),
fluidRow(
box(
title = "Top 20 Songs (Bubble)", status = "primary", solidHeader = TRUE,
collapsible = TRUE,
width = 8,
bubblesOutput("musicPlot", width = "100%", height = 710)
),
box(
title = "Top 20 Songs (Table)", status = "primary", solidHeader = TRUE,
collapsible = TRUE,
width = 4,
tableOutput("musicTable")
)
)
),
tabItem(tabName = "Info",
fluidRow(
box(
title = "SONGS GENRE OVERVIEW",
plotOutput("plot")
),
box(
title = "SINGERS OVERVIEW",
plotOutput("wordcloud_plot")
)
),
),
# Second tab content
tabItem(tabName = "Dataset",
DT::dataTableOutput("mytable")
),
# Third tab content
tabItem(tabName = "About",
box(
title = "Introduction", width = 6,background = "purple",
"Music brings a lot of benefits to us and this is the reason why music is said to be
one of the essential elements in human lives.In order to explore and select
favourite songs easily and correctly for users, a music
recommendation system needs to be introduced."
),
box(
title = "Objectives", width = 6, background = "purple",
"The main objective of the music recommendation system is to create a data
model with the help of content-based filtering to recommend relevant
music to users based on similar energy, danceability, beats per minute(bpm), duration and popularity of the songs."
),
box(
title = "Content-based filtering", width = 12,background = "purple",
"Content-based filtering is a familiar machine-learning technique in creating a recommender
system. This filtering will try to guess and predict the interest and tastes of users based on the
item’s features. To put it simply, content-based filtering depends on alike characteristics of the
items and generates item recommendations based on those that the same user has previously
ranked as the highest."
),
fluidRow(
box(
title = "Frequently Asked Questions", solidHeader = TRUE,width = 12,
"1.How does a music recommendation system work?",br(),"There are 2 most popular recommendation systems which is content-based and collaborative. The content-based approach relies on the similarity of particular items. In turn, a collaborative system is built on the basis of users’ overlapping preferences and ratings of songs.",
br(),br(),"2.How do you evaluate the performance of music recommendation system?",br(),"The common way to assess the performance of a music recommender system would be through standard metrics such as Accuracy, Precision or Recall.",
br(),br(),"3.How do you measure success of recommendation engine?",br(),"Through different metrics such as: Click-through rates, Sales and revenue, Effects on sales distributions, User engagement.",
br(),br(),"4.What is a disadvantage of a music recommender system?",br(),"Lack of data analytics capability.Like all AI-based technologies, recommendation engines rely on data – if you do not have high-quality data, or cannot crunch and analyze it properly, you will not be able to make the most of the recommendation engine",
br(),br(),"5.Why do we need music recommendation system?",br(),"By using music recommender system, the music provider can predict and then offer the appropriate songs to their users based on the characteristics of the music that has been heard previously."
))
)
)
)
)
server <- function(input, output) {
# Generate a random sample of 20 songs to choose from
sample_songs <- reactive({
generate_sample()
})
# Update the choices for the chosen songs input
observe({
updateSelectInput(inputId = "chosen_song1", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song2", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song3", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song4", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song5", choices = sample_songs()$Title)
})
# observe when the shuffle button is clicked and update the sample songs
observeEvent(input$shuffle, {
sample_songs <- reactive({
generate_sample()
})
updateSelectInput(inputId = "chosen_song1", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song2", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song3", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song4", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song5", choices = sample_songs()$Title)
})
observeEvent(input$submit, {
# check for duplicate selections
if (length(unique(c(input$chosen_song1, input$chosen_song2, input$chosen_song3, input$chosen_song4, input$chosen_song5))) < 5) {
# if duplicates exist, show a warning message
showModal(modalDialog(
title = "Warning",
"Duplicate song selection detected. Please choose different songs.",
footer = tagList(
modalButton("OK")
)
))
}
# if no duplicates, proceed with the rest of the code
else{
chosen_songs <- reactive({ c(input$chosen_song1, input$chosen_song2, input$chosen_song3, input$chosen_song4, input$chosen_song5)})
# Create a reactiveValues object to store the chosen songs
chosen_songs <- reactiveValues(values = c(input$chosen_song1, input$chosen_song2, input$chosen_song3, input$chosen_song4, input$chosen_song5))
# Subset the dataset to only include the chosen songs
chosen_songs_data <- df[df$Title %in% chosen_songs$values, ]
# Get the average energy and danceability of the chosen songs
energy <- mean(chosen_songs_data$Predicted_Energy)
danceability <- mean(chosen_songs_data$Predicted_Danceability)
bpm <- mean(chosen_songs_data$`Beats_Per_Minute`)
duration <- mean(chosen_songs_data$Duration)
popularity <- mean(chosen_songs_data$Popularity)
# Subset the dataset to only include songs with energy and danceability greater than or equal to the average of the chosen songs
recommended_songs <- df %>% filter(Predicted_Energy >= energy, Predicted_Danceability >= danceability, Beats_Per_Minute> bpm, Duration>duration, Popularity>popularity)
# Exclude the chosen songs from the recommended songs
recommended_songs <- recommended_songs %>% filter(!(Title %in% chosen_songs$values))
## if sample of recommended songs less than 10, will display remaining recommended songs
if(nrow(recommended_songs)==0)
{
showNotification("No recommended songs available. Please submit your choices again.", type = "warning")
}
else if(nrow(recommended_songs)<10){
output$recommended_songs <- renderTable({
req(input$chosen_song1, input$chosen_song2, input$chosen_song3, input$chosen_song4, input$chosen_song5)
recommended_songs %>% select(Title, Artist)
})
output$message <- renderText("Less than 10 songs found. Displaying all recommended songs.")
}
else {
req(input$chosen_song1, input$chosen_song2, input$chosen_song3, input$chosen_song4, input$chosen_song5)
# Randomly select 10 recommended songs
recommended_songs <- recommended_songs %>% sample_n(10) %>% select(Title, Artist)
# Update the recommended songs table
output$recommended_songs <- renderTable({
req(input$chosen_song1, input$chosen_song2, input$chosen_song3, input$chosen_song4, input$chosen_song5)
recommended_songs
})
}
}
})
#wordcloud
output$wordcloud_plot <- renderPlot({
wordcloud(df %>% select(Artist), scale=c(2,0.5), min.freq = 5, max.words=200,colors=brewer.pal(8, "Dark2"))
})
output$musicTable <- renderTable(
dfx %>% select(Title, Artist, Popularity) %>%
mutate(Popularity = format(Popularity, big.mark=","))
)
output$musicPlot <- renderBubbles({
if (nrow(df) == 0)
return()
dfx <- df %>% head(20) # Just show the top 20
bubbles(value = dfx$Popularity,
label = dfx$Title,
color = rainbow(20, alpha=NULL)[sample(20)] )
}
)
output$mytable = DT::renderDataTable({
df
})
output$plot<-renderPlot({
songs<-read.csv("genre.csv",fileEncoding = "ISO-8859-1",header = TRUE,sep = ",")
ddf<-songs%>%group_by(Genre)%>%summarize(Songs=sum(Songs))
g<-ggplot(ddf,aes(y=Genre,x=Songs,fill=Genre))
g+geom_bar(stat = "sum")+
scale_fill_hue(c = 40) +
theme(legend.position="none")
})
top10_genres <- df[order(df$Popularity, decreasing = TRUE),][1:11,]
y <- c(0,10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(wordcloud)
library(tm)
library(tidyverse)
library(bubbles)
library(DT)
library(ggplot2)
library(dplyr)
library(plotly)
df <- read.csv("musicDataset.csv",fileEncoding = "ISO-8859-1")
df <- df %>% drop_na
nrow(df)
df <- df %>% arrange(desc(Popularity))
#create a new dataframe
dfx <- df %>% head(20)
actual_energy <- df$actual_energy
predicted_energy <- df$predicted_energy
actual_danceability <- df$actual_danceability
predicted_danceability <- df$predicted_danceability
#create sample of 20 songs
generate_sample <- function() {
df %>% sample_n(20, replace = FALSE)
}
ui<-dashboardPage(skin ="purple",
dashboardHeader(
title = "Music Recommender",
titleWidth = 200
),
dashboardSidebar(
width=200,
sidebarMenu(
menuItem("Main",tabName = "Main",icon = icon("smile-wink")),
menuItem("Info",tabName = "Info",icon = icon("chart-bar")),
menuItem("Dataset",tabName = "Dataset",icon = icon("table")),
menuItem("About",tabName = "About",icon = icon("cog", lib = "glyphicon"))
)
),
dashboardBody(
tags$head(tags$style(HTML('
.main-header .logo {
font-family: "Georgia", Times, "Times New Roman", serif;
font-weight: bold;
font-size: 15px;
}
'))),
tabItems(
# First tab content
tabItem(tabName = "Main",
fluidRow(
box(
width = 12, background = "purple",
"NOTE that not all combinations of songs return suggestions."
)
),
fluidRow(
box(
title = "Please choose the songs interested", width = 8,
actionButton("shuffle", "Shuffle Sample Songs"),
selectInput("chosen_song1", "Song #1", choices = NULL, multiple = FALSE, selected = NULL),
selectInput("chosen_song2", "Song #2", choices = NULL, multiple = FALSE, selected = NULL),
selectInput("chosen_song3", "Song #3", choices = NULL, multiple = FALSE, selected = NULL),
selectInput("chosen_song4", "Song #4", choices = NULL, multiple = FALSE, selected = NULL),
selectInput("chosen_song5", "Song #5", choices = NULL, multiple = FALSE, selected = NULL),
h6("Press submit to update changes!"),
actionButton("submit", "Submit")
),
box(
title = "Recommended Songs", status = "primary", solidHeader = TRUE,
collapsible = TRUE,
width = 4,
tableOutput("recommended_songs")
)
),
fluidRow(
box(
title = "Top 20 Songs (Bubble)", status = "primary", solidHeader = TRUE,
collapsible = TRUE,
width = 8,
bubblesOutput("musicPlot", width = "100%", height = 710)
),
box(
title = "Top 20 Songs (Table)", status = "primary", solidHeader = TRUE,
collapsible = TRUE,
width = 4,
tableOutput("musicTable")
)
)
),
tabItem(tabName = "Info",
fluidRow(
box(
title = "SONGS GENRE OVERVIEW",
plotOutput("plot")
),
box(
title = "SINGERS OVERVIEW",
plotOutput("wordcloud_plot")
)
),
),
# Second tab content
tabItem(tabName = "Dataset",
DT::dataTableOutput("mytable")
),
# Third tab content
tabItem(tabName = "About",
box(
title = "Introduction", width = 6,background = "purple",
"Music brings a lot of benefits to us and this is the reason why music is said to be
one of the essential elements in human lives.In order to explore and select
favourite songs easily and correctly for users, a music
recommendation system needs to be introduced."
),
box(
title = "Objectives", width = 6, background = "purple",
"The main objective of the music recommendation system is to create a data
model with the help of content-based filtering to recommend relevant
music to users based on similar energy, danceability, beats per minute(bpm), duration and popularity of the songs."
),
box(
title = "Content-based filtering", width = 12,background = "purple",
"Content-based filtering is a familiar machine-learning technique in creating a recommender
system. This filtering will try to guess and predict the interest and tastes of users based on the
item’s features. To put it simply, content-based filtering depends on alike characteristics of the
items and generates item recommendations based on those that the same user has previously
ranked as the highest."
),
fluidRow(
box(
title = "Frequently Asked Questions", solidHeader = TRUE,width = 12,
"1.How does a music recommendation system work?",br(),"There are 2 most popular recommendation systems which is content-based and collaborative. The content-based approach relies on the similarity of particular items. In turn, a collaborative system is built on the basis of users’ overlapping preferences and ratings of songs.",
br(),br(),"2.How do you evaluate the performance of music recommendation system?",br(),"The common way to assess the performance of a music recommender system would be through standard metrics such as Accuracy, Precision or Recall.",
br(),br(),"3.How do you measure success of recommendation engine?",br(),"Through different metrics such as: Click-through rates, Sales and revenue, Effects on sales distributions, User engagement.",
br(),br(),"4.What is a disadvantage of a music recommender system?",br(),"Lack of data analytics capability.Like all AI-based technologies, recommendation engines rely on data – if you do not have high-quality data, or cannot crunch and analyze it properly, you will not be able to make the most of the recommendation engine",
br(),br(),"5.Why do we need music recommendation system?",br(),"By using music recommender system, the music provider can predict and then offer the appropriate songs to their users based on the characteristics of the music that has been heard previously."
))
)
)
)
)
server <- function(input, output) {
# Generate a random sample of 20 songs to choose from
sample_songs <- reactive({
generate_sample()
})
# Update the choices for the chosen songs input
observe({
updateSelectInput(inputId = "chosen_song1", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song2", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song3", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song4", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song5", choices = sample_songs()$Title)
})
# observe when the shuffle button is clicked and update the sample songs
observeEvent(input$shuffle, {
sample_songs <- reactive({
generate_sample()
})
updateSelectInput(inputId = "chosen_song1", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song2", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song3", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song4", choices = sample_songs()$Title)
updateSelectInput(inputId = "chosen_song5", choices = sample_songs()$Title)
})
observeEvent(input$submit, {
# check for duplicate selections
if (length(unique(c(input$chosen_song1, input$chosen_song2, input$chosen_song3, input$chosen_song4, input$chosen_song5))) < 5) {
# if duplicates exist, show a warning message
showModal(modalDialog(
title = "Warning",
"Duplicate song selection detected. Please choose different songs.",
footer = tagList(
modalButton("OK")
)
))
}
# if no duplicates, proceed with the rest of the code
else{
chosen_songs <- reactive({ c(input$chosen_song1, input$chosen_song2, input$chosen_song3, input$chosen_song4, input$chosen_song5)})
# Create a reactiveValues object to store the chosen songs
chosen_songs <- reactiveValues(values = c(input$chosen_song1, input$chosen_song2, input$chosen_song3, input$chosen_song4, input$chosen_song5))
# Subset the dataset to only include the chosen songs
chosen_songs_data <- df[df$Title %in% chosen_songs$values, ]
# Get the average energy and danceability of the chosen songs
energy <- mean(chosen_songs_data$Predicted_Energy)
danceability <- mean(chosen_songs_data$Predicted_Danceability)
bpm <- mean(chosen_songs_data$`Beats_Per_Minute`)
duration <- mean(chosen_songs_data$Duration)
popularity <- mean(chosen_songs_data$Popularity)
# Subset the dataset to only include songs with energy and danceability greater than or equal to the average of the chosen songs
recommended_songs <- df %>% filter(Predicted_Energy >= energy, Predicted_Danceability >= danceability, Beats_Per_Minute> bpm, Duration>duration, Popularity>popularity)
# Exclude the chosen songs from the recommended songs
recommended_songs <- recommended_songs %>% filter(!(Title %in% chosen_songs$values))
## if sample of recommended songs less than 10, will display remaining recommended songs
if(nrow(recommended_songs)==0)
{
showNotification("No recommended songs available. Please submit your choices again.", type = "warning")
}
else if(nrow(recommended_songs)<10){
output$recommended_songs <- renderTable({
req(input$chosen_song1, input$chosen_song2, input$chosen_song3, input$chosen_song4, input$chosen_song5)
recommended_songs %>% select(Title, Artist)
})
output$message <- renderText("Less than 10 songs found. Displaying all recommended songs.")
}
else {
req(input$chosen_song1, input$chosen_song2, input$chosen_song3, input$chosen_song4, input$chosen_song5)
# Randomly select 10 recommended songs
recommended_songs <- recommended_songs %>% sample_n(10) %>% select(Title, Artist)
# Update the recommended songs table
output$recommended_songs <- renderTable({
req(input$chosen_song1, input$chosen_song2, input$chosen_song3, input$chosen_song4, input$chosen_song5)
recommended_songs
})
}
}
})
#wordcloud
output$wordcloud_plot <- renderPlot({
wordcloud(df %>% select(Artist), scale=c(2,0.5), min.freq = 5, max.words=200,colors=brewer.pal(8, "Dark2"))
})
output$musicTable <- renderTable(
dfx %>% select(Title, Artist, Popularity) %>%
mutate(Popularity = format(Popularity, big.mark=","))
)
output$musicPlot <- renderBubbles({
if (nrow(df) == 0)
return()
dfx <- df %>% head(20) # Just show the top 20
bubbles(value = dfx$Popularity,
label = dfx$Title,
color = rainbow(20, alpha=NULL)[sample(20)] )
}
)
output$mytable = DT::renderDataTable({
df
})
output$plot<-renderPlot({
songs<-read.csv("genre.csv",fileEncoding = "ISO-8859-1",header = TRUE,sep = ",")
ddf<-songs%>%group_by(Genre)%>%summarize(Songs=sum(Songs))
g<-ggplot(ddf,aes(y=Genre,x=Songs,fill=Genre))
g+geom_bar(stat = "sum")+
scale_fill_hue(c = 40) +
theme(legend.position="none")
})
top10_genres <- df[order(df$Popularity, decreasing = TRUE),][1:11,]
y <- c(0,10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
}
shinyApp(ui = ui, server = server)
library(readr)
musicDataset <- read_csv("musicDataset.csv")
View(musicDataset)
library(readr)
genre <- read_csv("genre.csv")
View(genre)
shiny::runApp('MusicRecommendationSystem/MusicRecommendationSystem')
runApp('MusicRecommendationSystem/MusicRecommendationSystem')
View(musicDataset)
library(readr)
musicdata <- read_csv("MusicRecommendationSystem/MusicRecommendationSystem/musicdata.csv")
View(musicdata)
shiny::runApp('MusicRecommendationSystem/MusicRecommendationSystem')
